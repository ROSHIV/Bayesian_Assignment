% Asignement7
clc;
close all;
clear all;

%input parameter
Y = [607, 583, 521, 494, 369, 782, 570, 678, 467, 620, 425, 395, 346, 361, 310, 300, 382, 294, 315, 323, 421, 339, 398, 328, 335, 291, 329, 310, 294, 321, 286, 349, 279, 268, 293, 310, 259, 241, 243, 272, 247, 275, 220, 245, 268, 357, 273, 301, 322, 276, 401, 368, 149, 507, 411, 362, 358, 355, 362, 324, 332, 268, 259, 274, 248, 254, 242, 286, 276, 237, 259, 251, 239, 247, 260, 237, 206, 242, 361, 267, 245, 331, 357, 284, 263, 244, 317, 225, 254, 253, 251, 314, 239, 248, 250, 200, 256, 233, 427, 391, 331, 395, 337, 392, 352, 381, 330, 368, 381, 316, 335, 316, 302, 375, 361, 330, 351, 186, 221, 278, 244, 218, 126, 269, 238, 194, 384, 154, 555, 387, 317, 365, 357, 390, 320, 316, 297, 354, 266, 279, 327, 285, 258, 267, 226, 237, 264, 510, 490, 458, 425, 522, 927, 555, 550, 516, 548, 560, 545, 633, 496, 498, 223, 222, 309, 244, 207, 258, 255, 281, 258, 226, 257, 263, 266, 238, 249, 340, 247, 216, 241, 239, 226, 273, 235, 251, 290, 473, 416, 451, 475, 406, 349, 401, 334, 446, 401, 252, 266, 210, 228, 250, 265, 236, 289, 244, 327, 274, 223, 327, 307, 338, 345, 381, 369, 445, 296, 303, 326, 321, 309, 307, 319, 288, 299, 284, 278, 310, 282, 275, 372, 295, 306, 303, 285, 316, 294, 284, 324, 264, 278, 369, 254, 306, 237, 439, 287, 285, 261, 299, 311, 265, 292, 282, 271, 268, 270, 259, 269, 249, 261, 425, 291, 291, 441, 222, 347, 244, 232, 272, 264, 190, 219, 317, 232, 256, 185, 210, 213, 202, 226, 250, 238, 252, 233, 221, 220, 287, 267, 264, 273, 304, 294, 236, 200, 219, 276, 287, 365, 438, 420, 396, 359, 405, 397, 383, 360, 387, 429, 358, 459, 371, 368, 452, 358, 371];
ind = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34];
child = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0];
x = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];

%% Function 

%Prior
% log_p_Sigma =  @(Sigma) log(real(Sigma>0));
% log_p_tau = @(tau) 0;
log_p_mu = @(mu) 0;
log_p_phi = @(phi) 0; %ok<ELARLOG>
log_p_theta = @(theta,mu,tau,phi) (-(log(tau).*sqrt(2*pi)));
log_p_theta_classified = @(theta,mu,tau,phi) sum(-log(tau)-0.5.*((theta-(mu+phi.*child))./tau).^2);
%log posterior (hirarchical model)
% log_posterior = @(bita) log_p_likelihood(bita(1),bita(4:end)) + log_p_theta(bita(4:end),bita(3),bita(2)) + log_p_mu(bita(3)) + log_p_Sigma(bita(1)) +log_p_tau(bita(2));
%log posterior (classified)
log_posterior_classified = @(bita) log_p_likelihood(bita(1),bita(8:41),bita(42:end))+log_p_Sigma(bita(1))...
        +log_p_theta_classified(bita(8:41),bita(6),bita(2),bita(4))+log_p_mu(bita(6))+log_p_tau(bita(2))+log_p_phi(bita(4))...
        +log_p_theta_classified(bita(42:end),bita(7),bita(3),bita(5))+log_p_mu(bita(7))+log_p_tau(bita(3))+log_p_phi(bita(5));


%% slice sampling_classified  function slice_sample.m (Adult and Kids)

%Parameters 
sigma_ini_c = 0.15;
tau0_ini_c = 0.2;
tau1_ini_c = 0.005;
phi0_ini_c = 0.5;
phi1_ini_c = -0.03;
mu0_ini_c = 5.7;
mu1_ini_c = -0.01;
theta0_ini_c = 6*ones(1,34);
theta1_ini_c = -0.01*ones(1,34);
bita_ini_classified = [sigma_ini_c,tau0_ini_c,tau1_ini_c,phi0_ini_c,phi1_ini_c,mu0_ini_c,mu1_ini_c,theta0_ini_c,theta1_ini_c];
N_samples = 5000;
widths = 1; burnIn=0;

rnd_classified = slice_sample(N_samples,burnIn,log_posterior_classified,bita_ini_classified,widths,false); 

sigma_s_c = rnd_classified(1,:);
tau0_s_c = rnd_classified(2,:);
tau1_s_c = rnd_classified(3,:);
phi0_s_c = rnd_classified(4,:);
phi1_s_c = rnd_classified(5,:);
mu0_s_c = rnd_classified(6,:);
mu1_s_c = rnd_classified(7,:);
theta0_s_c = rnd_classified(8:41,:);
theta1_s_c = rnd_classified(42:end,:);


nbins=500;

% Task 3
% Oliver
i = 1;

figure()
hold on;
for ix = [1,5]
    t_Oliver = exp(theta0_s_c(i,:) + ix*theta1_s_c(i,:)+(sigma_s_c.^2)/2);
    Mean = mean(t_Oliver);
    Median = median(t_Oliver);
    HDI_1_o = prctile(t_Oliver,97.5);
    HDI_2_o = prctile(t_Oliver,2.5);

    histogram(t_Oliver,nbins,'Normalization','pdf');
    
    xline(Mean,'r',strrep(['Mean =' num2str(Mean) ],' ','_'), 'LineWidth', 2, 'LabelOrientation', 'horizontal');
    %xline(Median,'-- b',strrep(['Median =' num2str(Median) ],' ','_'), 'LineWidth', 2,'LabelOrientation', 'horizontal','LabelHorizontalAlignment', 'left' );
    xline(HDI_1_o,'LineWidth', 2); xline(HDI_2_o,'LineWidth', 2);
end % ix
legend('1th attampts','mean','HDI','HDI','5th attampts','mean','HDI','HDI')
title('Oliver - expected reaction time')
xlabel('t');
axis([300 800 0 inf])


% Jesper
i = 3;

figure()
hold on;
for ix = [1,5]
    t_Jesper = exp(theta0_s_c(i,:) + ix*theta1_s_c(i,:)+(sigma_s_c.^2)/2);
    Mean = mean(t_Jesper);
    Median = median(t_Jesper);
    HDI_1_j = prctile(t_Jesper,97.5);
    HDI_2_j = prctile(t_Jesper,2.5);

    histogram(t_Jesper,nbins,'Normalization','pdf');
    
    xline(Mean,'r',strrep(['Mean =' num2str(Mean) ],' ','_'), 'LineWidth', 2, 'LabelOrientation', 'horizontal');
    %xline(Median,'-- b',strrep(['Median =' num2str(Median) ],' ','_'), 'LineWidth', 2,'LabelOrientation', 'horizontal','LabelHorizontalAlignment', 'left' );
    xline(HDI_1_j,'LineWidth', 2); xline(HDI_2_j,'LineWidth', 2);
end % ix
legend('1th attampts','mean','HDI','HDI','5th attampts','mean','HDI','HDI')
title('Jesper - expected reaction time')
xlabel('t');
axis([200 500 0 inf])


% dude
i = 4;

figure()
hold on;
for ix = [1,5]
    t_dude = exp(theta0_s_c(i,:) + ix*theta1_s_c(i,:)+(sigma_s_c.^2)/2);
    Mean = mean(t_dude);
    Median = median(t_dude);
    HDI_1 = prctile(t_dude,97.5);
    HDI_2 = prctile(t_dude,2.5);

    histogram(t_dude,nbins,'Normalization','pdf');
    
    xline(Mean,'r',strrep(['Mean =' num2str(Mean) ],' ','_'), 'LineWidth', 2, 'LabelOrientation', 'horizontal');
    %xline(Median,'-- b',strrep(['Median =' num2str(Median) ],' ','_'), 'LineWidth', 2,'LabelOrientation', 'horizontal','LabelHorizontalAlignment', 'left' );
    xline(HDI_1,'LineWidth', 2); xline(HDI_2,'LineWidth', 2);
end % ix
legend('1th attampts','mean','HDI','HDI','5th attampts','mean','HDI','HDI')
title('dude - expected reaction time')
xlabel('t');
axis([200 500 0 inf])



%% log_liklihod
function [p] = log_p_likelihood(Sigma,theta0,theta1)

%input parameter
Y = [607, 583, 521, 494, 369, 782, 570, 678, 467, 620, 425, 395, 346, 361, 310, 300, 382, 294, 315, 323, 421, 339, 398, 328, 335, 291, 329, 310, 294, 321, 286, 349, 279, 268, 293, 310, 259, 241, 243, 272, 247, 275, 220, 245, 268, 357, 273, 301, 322, 276, 401, 368, 149, 507, 411, 362, 358, 355, 362, 324, 332, 268, 259, 274, 248, 254, 242, 286, 276, 237, 259, 251, 239, 247, 260, 237, 206, 242, 361, 267, 245, 331, 357, 284, 263, 244, 317, 225, 254, 253, 251, 314, 239, 248, 250, 200, 256, 233, 427, 391, 331, 395, 337, 392, 352, 381, 330, 368, 381, 316, 335, 316, 302, 375, 361, 330, 351, 186, 221, 278, 244, 218, 126, 269, 238, 194, 384, 154, 555, 387, 317, 365, 357, 390, 320, 316, 297, 354, 266, 279, 327, 285, 258, 267, 226, 237, 264, 510, 490, 458, 425, 522, 927, 555, 550, 516, 548, 560, 545, 633, 496, 498, 223, 222, 309, 244, 207, 258, 255, 281, 258, 226, 257, 263, 266, 238, 249, 340, 247, 216, 241, 239, 226, 273, 235, 251, 290, 473, 416, 451, 475, 406, 349, 401, 334, 446, 401, 252, 266, 210, 228, 250, 265, 236, 289, 244, 327, 274, 223, 327, 307, 338, 345, 381, 369, 445, 296, 303, 326, 321, 309, 307, 319, 288, 299, 284, 278, 310, 282, 275, 372, 295, 306, 303, 285, 316, 294, 284, 324, 264, 278, 369, 254, 306, 237, 439, 287, 285, 261, 299, 311, 265, 292, 282, 271, 268, 270, 259, 269, 249, 261, 425, 291, 291, 441, 222, 347, 244, 232, 272, 264, 190, 219, 317, 232, 256, 185, 210, 213, 202, 226, 250, 238, 252, 233, 221, 220, 287, 267, 264, 273, 304, 294, 236, 200, 219, 276, 287, 365, 438, 420, 396, 359, 405, 397, 383, 360, 387, 429, 358, 459, 371, 368, 452, 358, 371];
ind = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34];
x = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];

% ZLog_Y=  (log(Y)-mean(log(Y)))./std(log(Y)); % standardize log_Y
ZLog_Y = log(Y); % log_Y
% p = 0;
c = -log(Sigma.*sqrt(2*pi));
i = 1:length(Y);
j = ind(i);
p = sum(c-0.5.*((ZLog_Y(i)-(theta0(j)+theta1(j).*x(i)))./Sigma).^2); % Nomal probebility density function (liklihood)

% for i=1:length(Y)
%     j=ind(i);
%     p = p+sum(c-0.5.*((ZLog_Y(i)-(theta0(j)+theta1(j).*x(i)))./Sigma)^2); % Nomal probebility density function (liklihood)
% end
end

%% log_sigma
function output = log_p_Sigma(Sigma)
if Sigma>0
    output = 0;
else
    output = -inf;
end
end

%% log_tau
function output = log_p_tau(tau)
if tau>0
    output = 0;
else
    output = -inf;
end
end

% %% log_posterior_classified
% function output = log_posterior_classified(bita)
%     Sigma = bita(1);
%     tau0 = bita(2);
%     tau1 = bita(3);
%     phi0 = bita(4);
%     phi1 = bita(5);
%     mu0 = bita(6);
%     mu1 = bita(7);
%     theta0 = bita(8:41);
%     theta1 = bita(42:end);
% 
%     output = log_p_likelihood(Sigma,theta0,theta1)+log_p_Sigma(Sigma)...
%         +log_p_theta_classified(theta0,mu0,tau0,phi0)+log_p_mu(mu0)+log_p_tau(tau0)+log_p_phi(phi0)...
%         +log_p_theta_classified(theta1,mu1,tau1,phi1)+log_p_mu(mu1)+log_p_tau(tau1)+log_p_phi(phi1);
% end

